# -*- coding: utf-8 -*-
"""Novia_Dsilva_Iris_Decision_Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R6x5-e2klp9WY5SLpc7eUu94BAiv7Lkh

# Iris Decision Tree

### Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""### Importing the dataset"""

dataset = pd.read_csv('Iris.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""### Analysing the Training dataset"""

dataset.describe()

dataset.info()

dataset.count()

"""###  Visualising the datasets

"""

import seaborn as sns 
sns.heatmap(dataset.corr(), annot=True)

tmp = dataset.drop('Id', axis=1)
g = sns.pairplot(tmp, hue='Species', markers='+')
plt.show()

g = sns.violinplot(y='Species', x='SepalLengthCm', data=dataset, inner='quartile' )
plt.show()
g = sns.violinplot(y='Species', x='SepalWidthCm', data=dataset, inner='quartile')
plt.show()
g = sns.violinplot(y='Species', x='PetalLengthCm', data=dataset, inner='quartile')
plt.show()
g = sns.violinplot(y='Species', x='PetalWidthCm', data=dataset, inner='quartile')
plt.show()

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

"""### Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""### Training the Decision Tree Classification model on the Training set"""

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""###  Confusion Matrix """

from sklearn.metrics import confusion_matrix, accuracy_score
y_pred = classifier.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
print(cm)

print(y_pred)